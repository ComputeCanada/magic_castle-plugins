
name: Build client packages

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  build-packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.15' # The Go version to download (if necessary) and use.
      
      - name: Get the version number for the packages
        id: get_version
        # If this is a tag, use the tag name (e.g. v1.2.3) without v as version number.
        # Otherwise, just use 0.0.
        run: |
          VERSION=0.0
          REF_NAME=${{ github.ref }}
          [[ $REF_NAME == refs/tags/v* ]] && VERSION=${REF_NAME/refs\/tags\/v/}
          echo ::set-output name=version::${VERSION}

      - name: Build binaries
        id: build-binaries
        run: |
          make
          GOARCH=arm64 make

      - name: Build x86_64 RPM
        id: build-rpm
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: "usr"
          fpm_opts: "--debug -n magic_castle-plugins -v ${{ steps.get_version.outputs.version }} -t rpm  -s dir -C ./package/amd64 --description 'Magic Castle Plugins package'"
      
      - name: Build arm64 RPM
        id: build-rpm-arm64
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: "usr"
          fpm_opts: "--debug -n magic_castle-plugins -v ${{ steps.get_version.outputs.version }} -t rpm -a arm64 -s dir -C ./package/arm64 --description 'Magic Castle Plugins package'"

      - name: Find filenames of rpms
        id: find_filenames
        shell: bash
        run: |
          rpmx86_64="$(ls -1 *x86_64*.rpm)"
          rpmarm64="$(ls -1 *arm64*.rpm)"
          echo ::set-output name=rpmx86_64::${rpmx86_64}
          echo ::set-output name=rpmarm64::${rpmarm64}

      - name: Upload x86_64 RPM package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: x86_64 RPM package
          path: ${{ steps.find_filenames.outputs.rpmx86_64 }}

      - name: Upload arm64 RPM package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ARM64 RPM package
          path: ${{ steps.find_filenames.outputs.rpmarm64 }}

  release:
    needs: build-packages
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download x86_64 RPM package
        uses: actions/download-artifact@v2
        with:
          name: x86_64 RPM package
      - name: Download ARM64 RPM package
        uses: actions/download-artifact@v2
        with:
          name: ARM64 RPM package

      - name: Find filenames of downloaded packages
        id: find_filenames
        shell: bash
        run: |
          rpmx86_64="$(ls -1 *x86_64*.rpm)"
          rpmarm64="$(ls -1 *arm64*.rpm)"
          echo ::set-output name=rpmx86_64::${rpmx86_64}
          echo ::set-output name=rpmarm64::${rpmarm64}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Magic Castle Plugins ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload x86_64 RPM as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_filenames.outputs.rpmx86_64 }}
          asset_name: ${{ steps.find_filenames.outputs.rpmx86_64 }}
          asset_content_type: application/x-rpm

      - name: Upload ARM64 RPM as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_filenames.outputs.rpmarm64 }}
          asset_name: ${{ steps.find_filenames.outputs.rpmarm64 }}
          asset_content_type: application/x-rpm
